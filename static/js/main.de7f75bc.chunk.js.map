{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","empty","sortField","setSortField","reverseIsActive","setReverseIsActive","visibleGoods","goods","preparedGoods","sort","good1","good2","name","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,UAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,OAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EAhCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,gBAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAAUe,KACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,OACb,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXV,GACFI,EAAcO,UAGTP,EAOcQ,CACnBlB,EAAiB,CAAEI,YAAWE,oBAGhC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaN,EAAUe,OACtCO,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcL,EAAUe,OAJxC,iCAUA,wBACEM,QAAS,kBAAMf,EAAaN,EAAUiB,SACtCK,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYlB,IAAcL,EAAUiB,SAJxC,4BAWEV,EAEI,wBACEc,QAAS,WACPb,GAAmB,GACnBF,EAAaD,IAEfiB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAahB,IAPjB,qBAcA,wBACEc,QAAS,WACPb,GAAmB,GACnBF,EAAaD,IAEfiB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAahB,IAPjB,sBAgBW,KAAdF,GAAoBE,IAEjB,wBACEc,QAAS,WACPf,EAAaN,EAAUI,OACvBI,GAAmB,IAErBc,KAAK,SACLF,UAAU,4BANZ,sBAcR,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAIL,UAAU,OAAkB,UAAQ,OAAxC,SACGK,GADuBA,YCzIpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.de7f75bc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  name = 'name',\n  length = 'length',\n  empty = '',\n}\n\ntype ReorderParams = {\n  sortField: SortField,\n  reverseIsActive: boolean,\n};\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, reverseIsActive }: ReorderParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.name:\n          return good1.localeCompare(good2);\n\n        case SortField.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseIsActive) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.empty);\n  const [reverseIsActive, setReverseIsActive] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortField, reverseIsActive },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortField.name)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.name,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortField.length)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortField.length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        {\n          reverseIsActive\n            ? (\n              <button\n                onClick={() => {\n                  setReverseIsActive(false);\n                  setSortField(sortField);\n                }}\n                type=\"button\"\n                className={cn('button is-warning', {\n                  'is-light': !reverseIsActive,\n                })}\n              >\n                Reverse\n              </button>\n            )\n            : (\n              <button\n                onClick={() => {\n                  setReverseIsActive(true);\n                  setSortField(sortField);\n                }}\n                type=\"button\"\n                className={cn('button is-warning', {\n                  'is-light': !reverseIsActive,\n                })}\n              >\n                Reverse\n              </button>\n            )\n        }\n\n        {\n          (sortField !== '' || reverseIsActive)\n            && (\n              <button\n                onClick={() => {\n                  setSortField(SortField.empty);\n                  setReverseIsActive(false);\n                }}\n                type=\"button\"\n                className=\"button is-danger is-light\"\n              >\n                Reset\n              </button>\n            )\n        }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li className=\"Good\" key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}